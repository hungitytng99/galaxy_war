package com.mrwayfarout.tictactoe;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
//import java.awt.event.MouseEvent;
//import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

public class TicTacToe implements Runnable {

	private String ip = "localhost";
	private int port = 22222;
	private Scanner scanner = new Scanner(System.in);
	private JFrame frame;
	private final int WIDTH = 800;
	private final int HEIGHT = 600;
	private Thread thread;

	private Painter painter;
	private Socket socket;
	private DataOutputStream dos;
	private DataInputStream dis;

	private ServerSocket serverSocket;
	private Random rd=new Random();

	private BufferedImage galaxy;
//	private BufferedImage redX;
//	private BufferedImage blueX;
//	private BufferedImage redCircle;
//	private BufferedImage blueCircle;
	private BufferedImage tenluahong;
	private BufferedImage tenluaxanh;
	private BufferedImage bigbang;
	private BufferedImage dan;
	private BufferedImage maybay;

//	private String[] spaces = new String[9];
//
//	private boolean yourTurn = false;
	private boolean circle = true;
	private boolean hong = true;
	private boolean xanh = true;
	private boolean accepted = false;
	private boolean unableToCommunicateWithOpponent = false;
//	private boolean won = false;
//	private boolean enemyWon = false;
//	private boolean tie = false;

//	private int lengthOfSpace = 160;
//	private int errors = 0;
//	private int firstSpot = -1;
//	private int secondSpot = -1;
	private int x_tenluahong = 0;
	private int y_tenluahong = 500;
	private int x_tenluaxanh = 400;
	private int y_tenluaxanh = 500;
	private int xx_tenlua = 50;
	private int yy_tenlua = 50;
	private int x_mb;

	private Font font = new Font("Verdana", Font.BOLD, 32);
	private Font smallerFont = new Font("Verdana", Font.BOLD, 20);
	private Font largerFont = new Font("Verdana", Font.BOLD, 50);

	private String waitingString = "Waiting for another player";
	private String unableToCommunicateWithOpponentString = "Unable to communicate with opponent.";
//	private String wonString = "You won!";
//	private String enemyWonString = "Opponent won!";
//	private String tieString = "Game ended in a tie.";
	private boolean[][] listmb = new boolean[11][16];
	private boolean[][] listdan = new boolean[10][16];
//	private int[][] wins = new int[][] { { 0, 1, 2 }, { 3, 4, 5 }, { 6, 7, 8 }, { 0, 3, 6 }, { 1, 4, 7 }, { 2, 5, 8 }, { 0, 4, 8 }, { 2, 4, 6 } };

	/**
	 * <pre>
	 * 0, 1, 2 
	 * 3, 4, 5 
	 * 6, 7, 8
	 * </pre>
	 */
	private Timer timer;
	public int time = 50;

	public TicTacToe() {
//		System.out.println("Please input the IP: ");
//		ip = scanner.nextLine();
//		System.out.println("Please input the port: ");
//		port = scanner.nextInt();
//		while (port < 1 || port > 65535) {
//			System.out.println("The port you entered was invalid, please input another port: ");
//			port = scanner.nextInt();
//		}
		for (int i = 0; i < 11; i++) {
			for (int j = 1; j < 15; j++) {
				listmb[i][j] = false;
			}
		}
		for (int i = 1; i < 15; i++) {
			x_mb=rd.nextInt(10);
			listmb[x_mb][i] = true;
		}
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 16; j++) {
				listdan[i][j] = false;
			}
		}
		
		loadImages();

		painter = new Painter();
		painter.setPreferredSize(new Dimension(WIDTH, HEIGHT));

		if (!connect())
			initializeServer();

		frame = new JFrame();
		frame.setTitle("Tic-Tac-Toe");
		frame.setContentPane(painter);
		frame.setSize(WIDTH, HEIGHT);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		frame.setVisible(true);

		thread = new Thread(this, "TicTacToe");
		thread.start();

	}

	public void run() {
		while (true) {
			tick();
			painter.repaint();

			if (!accepted) {
				listenForServerRequest();

			}

		}
//		while (true) {
//			tick();
//			painter.repaint();
//			System.out.println("ACCC" + " "+ accepted);
//			
//			if (!accepted) {
//				listenForServerRequest();
//				painter.repaint();
//
//			}
//
//		}

	}

	private void render(Graphics g) {

		g.drawImage(galaxy, 0, 0, null);
		if (unableToCommunicateWithOpponent) {
			g.setColor(Color.RED);
			g.setFont(smallerFont);
			Graphics2D g2 = (Graphics2D) g;
			g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
			int stringWidth = g2.getFontMetrics().stringWidth(unableToCommunicateWithOpponentString);
			g.drawString(unableToCommunicateWithOpponentString, WIDTH / 2 - stringWidth / 2, HEIGHT / 2);
			return;
		}

		if (accepted) {
			
			if(xanh)g.drawImage(tenluaxanh, x_tenluaxanh, y_tenluaxanh, xx_tenlua, yy_tenlua, null, null);
			if(hong)g.drawImage(tenluahong, x_tenluahong, y_tenluahong, xx_tenlua, yy_tenlua, null, null);


			for (int i = 0; i < 11; i++) {
				for (int j = 1; j < 15; j++) {
					if (listmb[i][j] == true)
						g.drawImage(maybay, j * 50, i * 50, xx_tenlua - 10, yy_tenlua - 10, null, null);
				}
			}
			;
			for (int i = 0; i < 10; i++) {
				for (int j = 0; j < 16; j++) {
					if (listdan[i][j] == true)
						g.drawImage(dan, j * 50, i * 50, xx_tenlua - 10, yy_tenlua - 10, null, null);
				}
			}
			;
//			for (int i = 0; i < spaces.length; i++) {
//				if (spaces[i] != null) {
//					if (spaces[i].equals("X")) {
////						if (circle) {
//							g.drawImage(redX, (i % 3) * lengthOfSpace + 10 * (i % 3), (int) (i / 3) * lengthOfSpace + 10 * (int) (i / 3), null);
////						} else {
////							g.drawImage(blueX, (i % 3) * lengthOfSpace + 10 * (i % 3), (int) (i / 3) * lengthOfSpace + 10 * (int) (i / 3), null);
////						}
//					} else if (spaces[i].equals("O")) {
////						if (circle) {
//							g.drawImage(blueCircle, (i % 3) * lengthOfSpace + 10 * (i % 3), (int) (i / 3) * lengthOfSpace + 10 * (int) (i / 3), null);
////						} else {
////							g.drawImage(redCircle, (i % 3) * lengthOfSpace + 10 * (i % 3), (int) (i / 3) * lengthOfSpace + 10 * (int) (i / 3), null);
////						}
//					}
//				}
//			}
//			if (won || enemyWon) {
//				Graphics2D g2 = (Graphics2D) g;
//				g2.setStroke(new BasicStroke(10));
//				g.setColor(Color.BLACK);
//				g.drawLine(firstSpot % 3 * lengthOfSpace + 10 * firstSpot % 3 + lengthOfSpace / 2, (int) (firstSpot / 3) * lengthOfSpace + 10 * (int) (firstSpot / 3) + lengthOfSpace / 2, secondSpot % 3 * lengthOfSpace + 10 * secondSpot % 3 + lengthOfSpace / 2, (int) (secondSpot / 3) * lengthOfSpace + 10 * (int) (secondSpot / 3) + lengthOfSpace / 2);
//
//				g.setColor(Color.RED);
//				g.setFont(largerFont);
//				if (won) {
//					int stringWidth = g2.getFontMetrics().stringWidth(wonString);
//					g.drawString(wonString, WIDTH / 2 - stringWidth / 2, HEIGHT / 2);
//				} else if (enemyWon) {
//					int stringWidth = g2.getFontMetrics().stringWidth(enemyWonString);
//					g.drawString(enemyWonString, WIDTH / 2 - stringWidth / 2, HEIGHT / 2);
//				}
//			}
//			if (tie) {
//				Graphics2D g2 = (Graphics2D) g;
//				g.setColor(Color.BLACK);
//				g.setFont(largerFont);
//				int stringWidth = g2.getFontMetrics().stringWidth(tieString);
//				g.drawString(tieString, WIDTH / 2 - stringWidth / 2, HEIGHT / 2);
//			}
		} else {
			g.setColor(Color.WHITE);
			g.setFont(font);
			Graphics2D g2 = (Graphics2D) g;
			g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
			int stringWidth = g2.getFontMetrics().stringWidth(waitingString);
			g.drawString(waitingString, WIDTH / 2 - stringWidth / 2, HEIGHT / 2);
//			g.drawImage(tenlua, (8 % 3) * lengthOfSpace + 10 * (8 % 3), (int) (8 / 3) * lengthOfSpace + 10 * (int) (8 / 3), null);

			if(xanh)g.drawImage(tenluaxanh, x_tenluaxanh, y_tenluaxanh, xx_tenlua, yy_tenlua, null, null);
		}
//		g.drawImage(galaxy, 0, 0, null);
//		if (accepted) {
//			
//			g.drawImage(tenlua, x_tenlua, y_tenlua, xx_tenlua, yy_tenlua, null, null);
//			g.drawImage(dan, x_tenlua, y_tenlua, xx_tenlua, yy_tenlua, null, null);
//		}

	}

	private void tick() {
//		if (errors >= 10) unableToCommunicateWithOpponent = true;
//
//		if (!yourTurn && !unableToCommunicateWithOpponent) {
//			try {
//				x_tenlua = dis.readInt();
//				System.out.print(x_tenlua);
////				if (circle) spaces[space] = "X";
////				else spaces[space] = "O";
//				checkForEnemyWin();
//				checkForTie();
//				yourTurn = true;
//			} catch (IOException e) {
//				e.printStackTrace();
//				errors++;
//			}
//		}
		try {
			int input = dis.readInt();
			if (input % 50 == 0) {
				if(circle) {
					x_tenluahong = input;
				}else x_tenluaxanh = input;
				
			} else {
				System.out.println("UP");
				listdan[9][input] = true;
			}
			
			painter.repaint();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

//	private void checkForWin() {
//		for (int i = 0; i < wins.length; i++) {
//			if (circle) {
//				if (spaces[wins[i][0]] == "O" && spaces[wins[i][1]] == "O" && spaces[wins[i][2]] == "O") {
//					firstSpot = wins[i][0];
//					secondSpot = wins[i][2];
//					won = true;
//				}
//			} else {
//				if (spaces[wins[i][0]] == "X" && spaces[wins[i][1]] == "X" && spaces[wins[i][2]] == "X") {
//					firstSpot = wins[i][0];
//					secondSpot = wins[i][2];
//					won = true;
//				}
//			}
//		}
//	}

//	private void checkForEnemyWin() {
//		for (int i = 0; i < wins.length; i++) {
//			if (circle) {
//				if (spaces[wins[i][0]] == "X" && spaces[wins[i][1]] == "X" && spaces[wins[i][2]] == "X") {
//					firstSpot = wins[i][0];
//					secondSpot = wins[i][2];
//					enemyWon = true;
//				}
//			} else {
//				if (spaces[wins[i][0]] == "O" && spaces[wins[i][1]] == "O" && spaces[wins[i][2]] == "O") {
//					firstSpot = wins[i][0];
//					secondSpot = wins[i][2];
//					enemyWon = true;
//				}
//			}
//		}
//	}
//
//	private void checkForTie() {
//		for (int i = 0; i < spaces.length; i++) {
//			if (spaces[i] == null) {
//				return;
//			}
//		}
//		tie = true;
//	}

	private void listenForServerRequest() {
		Socket socket = null;
		try {
			socket = serverSocket.accept();
			dos = new DataOutputStream(socket.getOutputStream());
			dis = new DataInputStream(socket.getInputStream());
			accepted = true;
			System.out.println("CLIENT HAS REQUESTED TO JOIN, AND WE HAVE ACCEPTED");
			painter.repaint();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private boolean connect() {
		try {
			socket = new Socket(ip, port);
			dos = new DataOutputStream(socket.getOutputStream());
			dis = new DataInputStream(socket.getInputStream());
			accepted = true;
		} catch (IOException e) {
			System.out.println("Unable to connect to the address: " + ip + ":" + port + " | Starting a server");
			return false;
		}
		System.out.println("Successfully connected to the server.");
		return true;
	}

	private void initializeServer() {
		try {
			serverSocket = new ServerSocket(port, 8, InetAddress.getByName(ip));
		} catch (Exception e) {
			e.printStackTrace();
		}
//		yourTurn = true;
		circle = false;
	}

	private void loadImages() {
		try {
			galaxy = ImageIO.read(getClass().getResourceAsStream("/galaxy.png"));
//			redX = ImageIO.read(getClass().getResourceAsStream("/redX.png"));
//			redCircle = ImageIO.read(getClass().getResourceAsStream("/redCircle.png"));
//			blueX = ImageIO.read(getClass().getResourceAsStream("/blueX.png"));
//			blueCircle = ImageIO.read(getClass().getResourceAsStream("/blueCircle.png"));
			tenluaxanh = ImageIO.read(getClass().getResourceAsStream("/tenluaxanh.png"));
			tenluahong = ImageIO.read(getClass().getResourceAsStream("/tenluahong.png"));
			dan = ImageIO.read(getClass().getResourceAsStream("/danvang.png"));
			maybay = ImageIO.read(getClass().getResourceAsStream("/maybay.png"));
			bigbang = ImageIO.read(getClass().getResourceAsStream("/bigbang.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unused")
	public static void main(String[] args) {
		TicTacToe ticTacToe = new TicTacToe();
	}

	private class Painter extends JPanel implements KeyListener, ActionListener {
		private static final long serialVersionUID = 1L;

		public Painter() {
			setFocusable(true);
			requestFocus();
			setBackground(Color.WHITE);
//			addMouseListener(this);
			addKeyListener(this);
			timer = new Timer(time, this);
			timer.start();
		}

		@Override
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			render(g);
		}

//		@Override
//		public void mouseClicked(MouseEvent e) {
//			if (accepted) {
//				if (yourTurn && !unableToCommunicateWithOpponent && !won && !enemyWon) {
//					int x = e.getX() / lengthOfSpace;
//					int y = e.getY() / lengthOfSpace;
//					y *= 3;
//					int position = x + y;
//
//					if (spaces[position] == null) {
//						if (!circle) spaces[position] = "X";
//						else spaces[position] = "O";
//						yourTurn = false;
//						repaint();
//						Toolkit.getDefaultToolkit().sync();
//
//						try {
//							dos.writeInt(position);
//							dos.flush();
//						} catch (IOException e1) {
//							errors++;
//							e1.printStackTrace();
//						}
//
//						System.out.println("DATA WAS SENT");
//						checkForWin();
//						checkForTie();
//
//					}
//				}
//			}
//		}
//
//		@Override
//		public void mousePressed(MouseEvent e) {
//
//		}
//
//		@Override
//		public void mouseReleased(MouseEvent e) {
//
//		}
//
//		@Override
//		public void mouseEntered(MouseEvent e) {
//
//		}
//
//		@Override
//		public void mouseExited(MouseEvent e) {
//
//		}
		@Override
		public void keyTyped(KeyEvent e) {
			throw new UnsupportedOperationException("Not supported yet."); // To change body of generated methods,
																			// choose Tools | Templates.
		}

		@Override
		public void keyPressed(KeyEvent e) {
			if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
				System.out.println("d=go");
				if(circle) {
					if (x_tenluaxanh < 750)
						x_tenluaxanh += 50;
					repaint();
					try {
						dos.writeInt(x_tenluaxanh);
						dos.flush();
					} catch (IOException e1) {
	
						e1.printStackTrace();
					}
				}else {
					if (x_tenluahong < 750)
						x_tenluahong += 50;
					repaint();
					try {
						dos.writeInt(x_tenluahong);
						dos.flush();
					} catch (IOException e1) {
	
						e1.printStackTrace();
					}
				}
					

				System.out.println("DATA WAS SENT");

			}

			if (e.getKeyCode() == KeyEvent.VK_LEFT) {
				if(circle) {
					if (x_tenluaxanh > 0)
						x_tenluaxanh -= 50;
					repaint();
	
					try {
						dos.writeInt(x_tenluaxanh);
						dos.flush();
					} catch (IOException e1) {
	
						e1.printStackTrace();
					}
				}else {
					if (x_tenluahong > 0)
						x_tenluahong -= 50;
					repaint();
	
					try {
						dos.writeInt(x_tenluahong);
						dos.flush();
					} catch (IOException e1) {
	
						e1.printStackTrace();
					}
				}
					

				System.out.println("DATA WAS SENT");
			}
			if (e.getKeyCode() == KeyEvent.VK_UP) {
				int dann;
				if(circle) dann = x_tenluaxanh / 50;
				else dann = x_tenluahong / 50;
					listdan[9][dann] = true;
					repaint();

					try {
						dos.writeInt(dann);
						dos.flush();
					} catch (IOException e1) {

						e1.printStackTrace();
					}

				//System.out.println(dan);
			}
			Toolkit.getDefaultToolkit().sync();
//		        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
//					if (x_tenlua < 750) {
//						x_tenlua += 50;
//						try {
//							dos.writeInt(x_tenlua);
//							dos.flush();
//						} catch (Exception e2) {
//							// TODO: handle exception
//						}
//						repaint();
//					}
//				}
//
//				if (e.getKeyCode() == KeyEvent.VK_LEFT) {
//					if (x_tenlua > 50) {
//						x_tenlua -= 50;
//						try {
//							dos.writeInt(x_tenlua);
//							dos.flush();
//						} catch (Exception e2) {
//							// TODO: handle exception
//						}
//						repaint();
//					}
//				}
//				Toolkit.getDefaultToolkit().sync();

		}

		@Override
		public void keyReleased(KeyEvent e) {
			throw new UnsupportedOperationException("Not supported yet."); // To change body of generated methods,
																			// choose Tools | Templates.
		}

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			timer.start();
//			int x_mb=rd.nextInt(15);
			for (int i = 10; i >=0; i--) {
				for (int j = 15; j >=0; j--) {
					if (listmb[i][j] == true) {
						listmb[i][j] = false;
							if (i >= 0 &&i<10) {
								listmb[i + 1][j] = true;
								if(y_tenluahong==(i+1)*50&&x_tenluahong==j*50) hong=false;
							}
								
							if (i==10) {
								listmb[0][j] = true;
							}
								
					}
				}
			}
			for (int i = 0; i < 10; i++) {
				for (int j = 0; j < 16; j++) {
					if (listdan[i][j] == true) {
						listdan[i][j] = false;
						if (listmb[i][j]==true) {
							listmb[i][j]=false;
							
						}else {
							if (i > 0)
								listdan[i - 1][j] = true;
						}
							
					}
				}
			}
			repaint();
		}

	}

}
